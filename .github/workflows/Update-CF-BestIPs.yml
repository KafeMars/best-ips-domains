name: Update CF-BestIPs

on:
  schedule:
    - cron: '*/15 * * * *'  # 每15分钟运行一次
  workflow_dispatch: # 支持手动触发

jobs:
  update-ips:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码库
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 获取完整历史记录

      - name: 设置 Node.js 和安装 Puppeteer
        uses: actions/setup-node@v4
        with:
          node-version: '20'
        run: |
          npm install puppeteer
          # 安装 Chromium（Puppeteer 会自动下载，但确保可用）

      - name: 获取并更新 IP 地址
        run: |
          set -e
          # 创建 Puppeteer 脚本文件
          cat > extract_ips.js << 'EOF'
          const puppeteer = require('puppeteer');

          (async () => {
            const browser = await puppeteer.launch({
              headless: true,
              args: ['--no-sandbox', '--disable-setuid-sandbox']
            });
            const page = await browser.newPage();
            await page.goto('https://api.uouin.com/cloudflare.html', { waitUntil: 'networkidle2' });

            // 监视加载提示消失：等待页面中不再包含“正在加载最新的CloudFlare优选IP数据中...”文本
            await page.waitForFunction(
              () => {
                const loadingText = '正在加载最新的CloudFlare优选IP数据中...';
                const bodyText = document.body.innerText || '';
                return !bodyText.includes(loadingText);
              },
              { timeout: 30000 } // 最大等待30秒
            );

            // 加载提示消失后，额外等待3秒
            await page.waitForTimeout(3000);

            // 提取所有 IPv4 地址（使用正则匹配）
            const ips = await page.evaluate(() => {
              const ipRegex = /\b(?:[0-9]{1,3}\.){3}[0-9]{1,3}\b/g;
              const textContent = document.body.innerText || document.body.textContent || '';
              const matches = textContent.match(ipRegex) || [];
              // 去重但保持首次出现顺序
              const seen = new Set();
              return matches.filter(ip => {
                if (seen.has(ip)) return false;
                seen.add(ip);
                return true;
              });
            });

            await browser.close();

            // 输出 IPs，每行一个
            console.log(ips.join('\n'));
          })();
          EOF

          # 运行 Puppeteer 脚本，捕获输出到 temp_ips.txt
          node extract_ips.js > temp_ips.txt || {
            echo "错误：无法获取或提取 IP 地址"
            exit 1
          }

          # 检查 temp_ips.txt 是否为空
          [ -s temp_ips.txt ] || { echo "错误：IP 列表为空"; exit 1; }

          # 处理每个 IP：添加端口
          > CF-BestIPs  # 清空 CF-BestIPs 文件
          while IFS= read -r ip; do
            # 跳过空行
            [ -n "$ip" ] || continue
            # 添加端口
            ip_port="${ip}:8443"
            echo "${ip_port}" >> CF-BestIPs
          done < temp_ips.txt

          # 移除临时文件和脚本
          rm temp_ips.txt extract_ips.js

          # 检查 CF-BestIPs 是否为空
          [ -s CF-BestIPs ] || { echo "错误：IP 列表为空"; exit 1; }

          # 提交更新
          git config user.name 'GitHub Actions'
          git config user.email 'actions@github.com'
          git add CF-BestIPs
          git commit -m "自动更新 CF-BestIPs $(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M')" || true
          git pull --rebase origin main || { echo "错误：git pull --rebase 失败"; exit 1; }
          git push origin main || { echo "错误：git push 失败"; exit 1; }
          echo "成功更新 CF-BestIPs"
        shell: /usr/bin/bash -e {0}
